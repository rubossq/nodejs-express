#!/usr/bin/env node

/**
 * Module dependencies.
 */

let debug = require('debug')('structur:server');
let http = require('http');

let db = require('estorm-db');
const environment = process.env.NODE_ENV || 'development';
let config = require('../app/config')[environment];
let server;
let app;
let port;

db.connect(config.DB_SCHEME + config.DB_LOGIN + ':' + config.DB_PASSWORD + config.DB_URL, config.DB_NAME, function (err) {
    if (err) {
        console.log('Unable to connect to Mongo.');
        process.exit(1);
    } else {
        /**
         * Create HTTP server.
         */
        app = require('../app');
        port = normalizePort(config.PORT);
        app.set('port', port);
        server = http.createServer(app);

        console.log('Connected ok on port: ' + port);

        server.listen(port);
        server.on('error', onError);
        server.on('listening', onListening);
    }
});


/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
    let port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    try{
        db.get().close();
    }catch(e){

    }

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}
